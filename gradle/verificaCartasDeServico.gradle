import com.github.slugify.Slugify
import org.jsoup.Jsoup
import java.net.URL
import org.xml.sax.helpers.XMLReaderFactory
import org.xml.sax.InputSource

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.slugify:slugify:2.1.3'
        classpath 'org.jsoup:jsoup:1.8.2'
    }
}

def validaXml(arquivoXml) {
    def xmlReader = XMLReaderFactory.createXMLReader();

    try {
        arquivoXml.withInputStream { input -> xmlReader.parse(new InputSource(input)) }
    } catch (erro) {
        println "Arquivo XML inválido ${arquivoXml} -> ${erro.message}"
        throw erro
    }
}

def verificaNomeServico(arquivoXml, doc) {
    def slug = new Slugify()
    def nomeArquivo = arquivoXml.name.replaceAll('.xml', '')

    def idServico = doc.select('servico > id').text().trim()
    if(idServico) {
        assert nomeArquivo == idServico
    }

    def slugNomeServico = slug.slugify(doc.select('servico > nome').text())
    assert nomeArquivo == slugNomeServico
}

def verificaLinks(arquivoXml, doc) {
    def links = doc.select("link").collect { it.attr("href") }

    try {
        links.each { new URL(it).toURI() }
    } catch (erro) {
        println "Link quebrado na carta de serviços ${arquivoXml} -> ${erro.message}"
        throw erro
    }
}

def verificaServico(arquivoXml, doc) {
    validaXml(arquivoXml)
    verificaNomeServico(arquivoXml, doc)
    verificaLinks(arquivoXml, doc)
}

task verificaCartasDeServico << {
    def cartasServico = sourceSets.cartas.resources.files

    cartasServico
        .collect { arquivo -> [arquivo, Jsoup.parse(arquivo, 'UTF-8')] }
        .each { verificaServico(*it)  }
}

test.dependsOn verificaCartasDeServico
